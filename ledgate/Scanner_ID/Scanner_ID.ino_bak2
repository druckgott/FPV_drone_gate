#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <math.h>  // Für die Logarithmus-Berechnung
#include <ArduinoJson.h> // Für JSON Verarbeitung

// Konfigurationsparameter
unsigned long previousMillis = 0; // speichert die Zeit des letzten Scans
unsigned long elapsedMillis = 0;  // speichert die verstrichene Zeit zwischen Scans
const unsigned long scanInterval = 50; // Intervall zwischen den Scans in Millisekunden
const char* targetSSIDPrefix = "Drohne"; // Ersetze "Drohne" durch den SSID-Präfix, nach dem gesucht werden soll
// Abstand in Zentimetern (konfigurierbar)
const float distance_cm = 150.0; // Setze den gewünschten Abstand in cm
// Anzahl der Werte zum Mitteln
const int averagingCount = 3; // Parameter zum Mitteln der Drohnendaten

const char* ssid = "Drone_Gate_01"; // WiFi SSID
const char* password = "12345678"; // WiFi Passwort

// Parameter für die Umrechnung von Entfernung in RSSI
const float A = -40; // Typischer RSSI-Wert in 1 Meter Entfernung
const float n = 2.0; // Signalabfallfaktor für freie Sicht (anpassbar je nach Umgebung)

// Webserver auf Port 80
ESP8266WebServer server(80);

// Globale Variablen für Drohnendaten
String closestDrone = "";
long closestRSSI = LONG_MIN;
StaticJsonDocument<1024> droneData;

// Funktion zur Umrechnung von Abstand (in cm) in RSSI
long calculateRSSIFromDistance(float distance_cm) {
  float distance_m = distance_cm / 100.0; // Umrechnung von cm in Meter
  return A - 10 * n * log10(distance_m);  // Berechnung des RSSI-Werts
}

// Funktion zur Berechnung des Durchschnitts der RSSI-Werte
long averageRSSI(long rssiValues[], int count) {
  long sum = 0;
  for (int i = 0; i < count; i++) {
    sum += rssiValues[i];
  }
  return sum / count;
}

// Funktion zur Suche von Drohnen in der Umgebung mit einem Abstand in cm
void scanForDrones(float distance_cm) {
  long rssiThreshold = calculateRSSIFromDistance(distance_cm); // Berechnung des RSSI-Schwellenwerts

  // Starten des Scanvorgangs
  int n = WiFi.scanNetworks(false, true, true); // Scan mit aktivem Scan und vollständigen Informationen

  // Zurücksetzen der Drohnendaten
  closestDrone = "";
  closestRSSI = LONG_MIN;
  droneData.clear();
  droneData["drones"] = JsonArray(); // JSON-Array für Drohnen initialisieren

  // Überprüfen, ob Netzwerke gefunden wurden
  if (n == 0) {
    Serial.println("Keine Netzwerke gefunden.");
  } else {
    long rssiValues[averagingCount] = {0}; // Array für RSSI-Werte zum Mitteln
    int valueIndex = 0; // Index für den nächsten Wert

    // Durchlaufen aller gefundenen Netzwerke
    for (int i = 0; i < n; i++) {
      String ssid = WiFi.SSID(i);
      long rssi = WiFi.RSSI(i); // RSSI des gefundenen Netzwerks abrufen

      if (ssid.startsWith(targetSSIDPrefix)) { // SSID-Präfix prüfen
        Serial.printf("Gefunden: SSID: %s | RSSI: %ld\n", ssid.c_str(), rssi);

        // RSSI-Wert im Array speichern und den Index erhöhen
        rssiValues[valueIndex] = rssi;
        valueIndex = (valueIndex + 1) % averagingCount; // Zyklisch den Index zurücksetzen

        // Drohne mit dem stärksten RSSI finden
        long averagedRSSI = averageRSSI(rssiValues, averagingCount); // Durchschnitt berechnen
        if (averagedRSSI > closestRSSI) {
          closestDrone = ssid;
          closestRSSI = averagedRSSI;
        }

        // Überprüfen, ob die Drohne bereits im Array ist
        bool exists = false;
        for (JsonObject droneInfo : droneData["drones"].as<JsonArray>()) {
          if (droneInfo["ssid"] == ssid) {
            exists = true;
            break; // Drohne existiert bereits, keine neue hinzufügen
          }
        }

        // Drohneninformationen zur JSON-Datenstruktur hinzufügen
        if (!exists) {
          JsonObject droneInfo = droneData["drones"].createNestedObject();
          droneInfo["ssid"] = ssid;
          droneInfo["rssi"] = averagedRSSI;
          droneInfo["isClosest"] = (averagedRSSI > calculateRSSIFromDistance(distance_cm)); // Marker für die nächste Drohne
        }
      }
    }

    // Wenn die nächste Drohne gefunden wurde
    if (closestDrone != "") {
      Serial.printf("Nächste Drohne: SSID: %s | RSSI: %ld\n", closestDrone.c_str(), closestRSSI);
    }

    // JSON-Daten aktualisieren
    droneData["closest"]["ssid"] = closestDrone;
    droneData["closest"]["rssi"] = closestRSSI;
  }

  // Leeren des Scanergebnisses
  WiFi.scanDelete();
}

// Webserver Handler für Drohnendaten
void handleDroneData() {
  String response;
  serializeJson(droneData, response);
  server.send(200, "application/json", response);
}

// Webserver Handler für die Webseite
void handleRoot() {
  String html = R"=====(
    <!DOCTYPE html>
    <html>
    <head>
      <title>Drohnen Scanner</title>
      <style>
        body {
          background-color: #f0f0f0;
          font-family: Arial, sans-serif;
          color: black;
        }
        table {
          width: 100%;
          border-collapse: collapse;
        }
        table, th, td {
          border: 1px solid black;
        }
        th, td {
          padding: 15px;
          text-align: left;
        }
        .closest {
          background-color: lime;
          color: black;
        }
        .farther {
          background-color: yellow;
          color: black;
        }
      </style>
      <script>
        function fetchDroneData() {
          fetch("/droneData")
            .then(response => response.json())
            .then(data => {
              // Drohnen nach ihrem Namen sortieren
              data.drones.sort((a, b) => a.ssid.localeCompare(b.ssid));
              
              let droneTable = "";
              for (let i = 0; i < data.drones.length; i++) {
                let className = data.drones[i].ssid === data.closest.ssid ? "closest" : "farther";
                droneTable += "<tr class='" + className + "'><td>" + data.drones[i].ssid + "</td><td>" + data.drones[i].rssi + "</td></tr>";
              }
              document.getElementById("drone-list").innerHTML = droneTable;
            });
        }
        setInterval(fetchDroneData, 100); // Aktualisiert die Daten alle 0.1 Sekunde
      </script>
    </head>
    <body>
      <h1>Drohnen Scanner</h1>
      <table>
        <tr>
          <th>Drohne</th>
          <th>RSSI</th>
        </tr>
        <tbody id="drone-list">
          <tr><td>Lade...</td><td>Lade...</td></tr>
        </tbody>
      </table>
    </body>
    </html>
  )=====";
  server.send(200, "text/html", html);
}

void setup() {
  Serial.begin(115200);  // Serielle Kommunikation starten
  WiFi.mode(WIFI_AP);    // Den ESP8266 in den Access Point-Modus versetzen
  WiFi.softAP(ssid, password); // Access Point starten

  // Webserver Routen definieren
  server.on("/", handleRoot);            // Route für die Webseite
  server.on("/droneData", handleDroneData); // Route für die JSON-Daten
  server.begin();  // Webserver starten
  Serial.println("Webserver gestartet!");

  WiFi.disconnect();      // Vor dem Scannen sicherstellen, dass keine Verbindung besteht
  delay(100);            // Kurze Wartezeit
}

void loop() {
  server.handleClient(); // Webserver Anfragen verarbeiten
  unsigned long currentMillis = millis(); // aktuelle Zeit abrufen

  // Überprüfen, ob die Zeit für den nächsten Scan gekommen ist
  if (currentMillis - previousMillis >= scanInterval) {
    // Berechne die verstrichene Zeit
    elapsedMillis = currentMillis - previousMillis;
    previousMillis = currentMillis; // Zeit des letzten Scans aktualisieren

    // Drohnen scannen basierend auf dem konfigurierten Abstand
    scanForDrones(distance_cm);
  }
}
