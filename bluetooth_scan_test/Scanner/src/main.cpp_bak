#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <Arduino.h>
#include <WiFi.h>
#include <WiFiUdp.h>

const char* ssid = "LED_GATE_SERVER_01";           // SSID des Access Points (ESP8266)
const char* password = "12345678";     // Passwort des Access Points (ESP8266)
WiFiUDP udp;
const char* udpAddress = "192.168.4.1";    // IP-Adresse des ESP8266 (AP)
const int udpPort = 1234; 

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    // Hole die Service-Daten vom beworbenen Gerät
    std::string deviceName = advertisedDevice.getName();
    if (!deviceName.empty() && deviceName.find("Drone_") != std::string::npos) { // Verwende .empty() anstelle von !
    Serial.println("Scan-Ergebnis gefunden:");

    // Ausgabe des Gerätetyps und der RSSI-Signalstärke
    Serial.print("Gerätename: ");
    Serial.println(advertisedDevice.getName().c_str());
    Serial.print("Signalstärke (RSSI): ");
    Serial.println(advertisedDevice.getRSSI());
    }

    BLEDevice::getScan()->stop();
  }
};

void setup() {
  Serial.begin(115200);
  delay(3000); // 1 Sekunde warten

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
      delay(1000);
      Serial.println("Verbinde mit dem Access Point...");
  }
  Serial.println("Verbunden mit dem Access Point");

  Serial.println("Startet kontinuierlichen BLE-Scan...");

  // BLE initialisieren
  BLEDevice::init("");
  

  // BLE-Scan konfigurieren
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true); // Aktives Scannen für genauere RSSI-Werte
  pBLEScan->setInterval(32);    // Scan-Intervall in 0.625ms-Einheiten
  pBLEScan->setWindow(32);       // Scan-Fenster in 0.625ms-Einheiten
  
}

void loop() {
  // Starte den Scan ohne zeitliche Begrenzung und bereinige die Ergebnisse direkt danach
  BLEDevice::getScan()->start(0.1, true); // kurzer Scan, um wiederholte Ergebnisse zu ermöglichen

    const char* message = "Hallo vom ESP32-C3";
    udp.beginPacket(udpAddress, udpPort);
    udp.write((const uint8_t*)message, strlen(message)); // Korrekte Verwendung der write-Funktion
    udp.endPacket();
    Serial.println("Nachricht gesendet: " + String(message));

  BLEDevice::getScan()->clearResults();    // Bereinige die Ergebnisse sofort für den nächsten Scan
}
